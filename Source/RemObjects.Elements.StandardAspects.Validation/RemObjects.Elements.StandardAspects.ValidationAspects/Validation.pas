namespace RemObjects.Elements.StandardAspects.Validation.Aspects;

interface

uses
  RemObjects.Oxygene.Cirrus.*,
  System.Collections.Generic,
  System.Linq,
  System.Text;

type

  [AttributeUsage(AttributeTargets.Class)]
  ValidationAttribute = public class(Attribute,
    ITypeInterfaceDecorator,
    ITypeImplementationDecorator)


  private

    method BuildItemGetterContents(Services: RemObjects.Oxygene.Cirrus.IServices; itemGetterDefinition:IMethodDefinition);

    method SupportIDataErrorInfo(Services: RemObjects.Oxygene.Cirrus.IServices; aType: RemObjects.Oxygene.Cirrus.ITypeDefinition);
    method IsValidMethod (Services: RemObjects.Oxygene.Cirrus.IServices; aType: RemObjects.Oxygene.Cirrus.ITypeDefinition);

    method BuildGetRuleViolations(Services: RemObjects.Oxygene.Cirrus.IServices; aType: RemObjects.Oxygene.Cirrus.ITypeDefinition):IMethodDefinition;


  public
    const itemValidationValueName : String =  'itemValidationValue';


    method HandleImplementation(Services: RemObjects.Oxygene.Cirrus.IServices; aType: RemObjects.Oxygene.Cirrus.ITypeDefinition);
    method HandleInterface(Services: RemObjects.Oxygene.Cirrus.IServices; aType: RemObjects.Oxygene.Cirrus.ITypeDefinition);
  end;
  
implementation

///
/// Build IDataErrorInfo support and IsValid method
///

method ValidationAttribute.HandleInterface(Services: RemObjects.Oxygene.Cirrus.IServices; aType: RemObjects.Oxygene.Cirrus.ITypeDefinition);
begin

  SupportIDataErrorInfo(services, aType);

  IsValidMethod(services, aType);

end;

method ValidationAttribute.HandleImplementation(Services: RemObjects.Oxygene.Cirrus.IServices; aType: RemObjects.Oxygene.Cirrus.ITypeDefinition);
begin
end;

///
/// Add GetRuleViolations method
///
method ValidationAttribute.BuildGetRuleViolations(Services: RemObjects.Oxygene.Cirrus.IServices; aType: RemObjects.Oxygene.Cirrus.ITypeDefinition):IMethodDefinition;
begin
  // Signature - aType.GetRuleViolations(): IEnumerable<RuleViolation>

  var genericRuleViolation:=Services.CreateGenericInstance(
    Services.FindType('System.Collections.Generic.IEnumerable`1'),
    [Services.FindType(ValidateBaseAttribute.RuleViolationType)]
    );

  var getRuleViolations : IMethodDefinition := aType.AddMethod('GetRuleViolations',
    genericRuleViolation,
    false);

  getRuleViolations.Iterator:=true;


  // Add statements generated by Validation Property and Method Aspects to body of method
  var statements:List<Statement>;

  if(StatementStorage.Statements.TryGetValue(aType.Fullname,out statements))then
  begin
    for additionalStatement in statements do 
    begin
      getRuleViolations.SetBody(Services,method
      begin
        unquote(additionalStatement);
        Aspects.OriginalBody;
        
      end);

    end;
  end;


  result:=getRuleViolations;

end;


///
/// IDataErrorInfo implementation
///
method ValidationAttribute.SupportIDataErrorInfo(Services: RemObjects.Oxygene.Cirrus.IServices; aType: RemObjects.Oxygene.Cirrus.ITypeDefinition);
begin

  var dataErrorInfoType := Services.FindType('System.ComponentModel.IDataErrorInfo');

  if(assigned(dataErrorInfoType))then
  begin

    var errorDefinition : IPropertyDefinition  := aType.AddProperty('Error', Services.GetType('System.String'), false);

    var errorDefinitionGetter: IMethodDefinition  := aType.AddMethod('get_Error',Services.GetType('System.String'),false);
    errorDefinitionGetter.Visibility := Visibility.Public;

    errorDefinitionGetter.SetBody( Services, method
    begin

    end);

    errorDefinition.ReadMethod := errorDefinitionGetter;


    var itemDefinition : IPropertyDefinition := aType.AddProperty('Item', Services.GetType('System.String'), false);

    itemDefinition.AddParameter('columnName', ParameterModifier.In, Services.GetType('System.String'));

    var itemDefinitionGetter : IMethodDefinition := aType.AddMethod('get_Item', Services.GetType('System.String'), false);
    itemDefinitionGetter.Visibility := Visibility.Public;
    itemDefinitionGetter.AddParameter('columnName', ParameterModifier.In, Services.GetType('System.String'));

    BuildItemGetterContents(services, itemDefinitionGetter);
    itemDefinition.ReadMethod := itemDefinitionGetter;

    aType.AddInterface(dataErrorInfoType);
  end
  else
  begin
    Services.EmitWarning('interface IDataErrorInfo was not found, it has not been implemented');
  end;
end;

///
/// Build method with multiple of the following, one for each
/// if something = false then
///   itemValidationValue = message
/// end
///
method ValidationAttribute.BuildItemGetterContents(Services: RemObjects.Oxygene.Cirrus.IServices; itemGetterDefinition:IMethodDefinition);
begin

  { declare var to hold result }

  var itemValidationValueLocal := itemGetterDefinition.AddLocal(itemValidationValueName,Services.FindType('System.String'));

  var itemValidation := new LocalValue(itemValidationValueLocal.Index);

  { Final assignment of itemValidationValue to result}

  var assignResult := new AssignmentStatement(new ResultValue, itemValidation);


  itemGetterDefinition.SetBody( Services, method
  begin
    unquote(assignResult);
  end);

end;


method ValidationAttribute.IsValidMethod (Services: RemObjects.Oxygene.Cirrus.IServices; aType: RemObjects.Oxygene.Cirrus.ITypeDefinition);
begin
  var getRuleViolations:= BuildGetRuleViolations(Services, aType);

  var getRuleViolationCall:=new ProcValue(new SelfValue(),getRuleViolations);
  
  var getInstanceProc:= new ProcValue(new TypeValue(Services.FindType('System.Linq.Enumerable')), 
        'Count', [Services.FindType(ValidateBaseAttribute.RuleViolationType) as IType],  [getRuleViolationCall]);

  var countZero:= new IIfValue(new BinaryValue(getInstanceProc,0,BinaryOperator.Equal),new DataValue(true),new DataValue(false));

  var assignToResult:= new AssignmentStatement(new ResultValue,countZero);


  var isValidMethodDefinition:=aType.AddMethod('IsValid',Services.FindType('System.Boolean'),false);

  isValidMethodDefinition.SetBody(Services, method
    begin
     unquote(assignToResult);
    end);

end;

end.